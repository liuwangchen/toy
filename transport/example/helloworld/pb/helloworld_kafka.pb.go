// Code generated by protoc-gen-go-kafka DO NOT EDIT.
// versions:
// protoc-gen-go-kafka v2.2.2

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	middleware "github.com/liuwangchen/toy/transport/middleware"
	kafkarpc "github.com/liuwangchen/toy/transport/rpc/kafkarpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the goctopus package it is being compiled against.
var _ = new(context.Context)
var _ = new(empty.Empty)
var _ = middleware.Chain()

const _ = kafkarpc.SupportPackageIsVersion1

type PusherKafkaServer interface {
	Push(context.Context, *PushNotify) error
}

func RegisterPusherKafkaServer(s *kafkarpc.Server, srv PusherKafkaServer) {
	// 特等生成
	s.Subscribe("Pusher.Push", func(ctx context.Context, b []byte) error {
		msg := new(PushNotify)
		err := s.GetCodec().Unmarshal(b, msg)
		if err != nil {
			return err
		}
		// 特定生成
		h := func(ctx context.Context, req1 interface{}) (reply interface{}, err error) {
			// 生成
			err = srv.Push(ctx, req1.(*PushNotify))
			return nil, err
		}
		if len(s.GetMiddlewares()) > 0 {
			h = middleware.Chain(s.GetMiddlewares()...)(h)
		}
		_, err = h(ctx, msg)
		return err
	}, true, "")
}

type PusherKafkaClient interface {
	Push(ctx context.Context, req *PushNotify) error
}

type PusherKafkaClientImpl struct {
	c *kafkarpc.Client
}

func NewPusherKafkaClient(client *kafkarpc.Client) PusherKafkaClient {
	return &PusherKafkaClientImpl{client}
}

func (c *PusherKafkaClientImpl) Push(ctx context.Context, in *PushNotify) error {
	return c.c.Publish(ctx, "Pusher.Push", in)
}
