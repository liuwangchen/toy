// Code generated by protoc-gen-go-natsrpc DO NOT EDIT.
// versions:
// protoc-gen-go-natsrpc v2.2.2

package pb

import (
	bytes "bytes"
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	async "github.com/liuwangchen/toy/pkg/async"
	middleware "github.com/liuwangchen/toy/transport/middleware"
	natsrpc "github.com/liuwangchen/toy/transport/rpc/natsrpc"
	template "text/template"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the goctopus package it is being compiled against.
var _ = new(context.Context)
var _ = new(bytes.Buffer)
var _ = new(template.FuncMap)
var _ = middleware.Chain()
var _ = new(empty.Empty)
var _ = new(async.Async)

const _ = natsrpc.SupportPackageIsVersion1
const _ = proto.ProtoPackageIsVersion3

// GreeterNatsService  service interface
type GreeterNatsService interface {
	// SayHello call
	SayHello(ctx context.Context, req *HelloRequest) (*HelloReply, error)
}

// RegisterGreeter register Greeter service
func RegisterGreeterNatsServer(conn *natsrpc.ServerConn, s GreeterNatsService, opts ...natsrpc.ServiceOption) error {
	opts = append(opts, natsrpc.WithServiceMethodSequence(map[string]bool{
		"SayHello": true,
	}))
	return conn.Register("github.com.liuwangchen.toy.transport.examples.helloworld.pb.Greeter", s, opts...)
}

// GreeterNatsClient
type GreeterNatsClient interface {
	// SayHello
	SayHello(ctx context.Context, req *HelloRequest) (*HelloReply, error)
}

type _GreeterNatsClient struct {
	c *natsrpc.Client
}

// NewGreeterNatsClient
func NewGreeterNatsClient(conn *natsrpc.ClientConn, opts ...natsrpc.ClientOption) GreeterNatsClient {
	ret := &_GreeterNatsClient{
		c: natsrpc.NewClient(conn, opts...),
	}
	return ret
}
func (c *_GreeterNatsClient) SayHello(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	rep := &HelloReply{}
	err := c.c.Request(ctx, "github.com.liuwangchen.toy.transport.examples.helloworld.pb.Greeter", "SayHello", req, rep)
	return rep, err
}

// Async
// GreeterAsyncNatsClient
type GreeterAsyncNatsClient interface {
	// SayHello
	SayHello(ctx context.Context, req *HelloRequest, cb func(*HelloReply, error))
	SyncClient() GreeterNatsClient
}

type _GreeterAsyncNatsClient struct {
	c  GreeterNatsClient
	as async.IAsync
}

// NewGreeterAsyncNatsClient
func NewGreeterAsyncNatsClient(conn *natsrpc.ClientConn, as async.IAsync, opts ...natsrpc.ClientOption) GreeterAsyncNatsClient {
	ret := &_GreeterAsyncNatsClient{
		c:  NewGreeterNatsClient(conn, opts...),
		as: as,
	}
	return ret
}

func (c *_GreeterAsyncNatsClient) SyncClient() GreeterNatsClient {
	return c.c
}
func (c *_GreeterAsyncNatsClient) SayHello(ctx context.Context, req *HelloRequest, cb func(*HelloReply, error)) {
	reqClone := proto.Clone(req)
	go func() {
		rep, err := c.c.SayHello(ctx, reqClone.(*HelloRequest))
		c.as.DoWithNoRet(ctx, func() {
			cb(rep, err)
		})
	}()
}

// PusherNatsService  service interface
type PusherNatsService interface {
	// Push call
	Push(ctx context.Context, req *PushNotify) error
}

// RegisterPusher register Pusher service
func RegisterPusherNatsServer(conn *natsrpc.ServerConn, s PusherNatsService, opts ...natsrpc.ServiceOption) error {
	var buf bytes.Buffer
	tmpl, _ := template.New("").Parse("{{.Id}}")
	_ = tmpl.Execute(&buf, s)
	opts = append(opts, natsrpc.WithServiceTopic(buf.String()))
	return conn.Register("github.com.liuwangchen.toy.transport.examples.helloworld.pb.Pusher", s, opts...)
}

// PusherNatsClient
type PusherNatsClient interface {
	// Push
	Push(ctx context.Context, notify *PushNotify) error
}

type _PusherNatsClient struct {
	c *natsrpc.Client
}

// NewPusherNatsClient
func NewPusherNatsClient(conn *natsrpc.ClientConn, opts ...natsrpc.ClientOption) PusherNatsClient {
	ret := &_PusherNatsClient{
		c: natsrpc.NewClient(conn, opts...),
	}
	return ret
}
func (c *_PusherNatsClient) Push(ctx context.Context, notify *PushNotify) error {
	var buf bytes.Buffer
	tmpl, _ := template.New("").Parse("{{.Id}}")
	_ = tmpl.Execute(&buf, notify)
	ctx = natsrpc.WithCallTopicContext(ctx, buf.String())
	return c.c.Publish(ctx, "github.com.liuwangchen.toy.transport.examples.helloworld.pb.Pusher", "Push", notify)
}

// Async
// PusherAsyncNatsClient
type PusherAsyncNatsClient interface {
	// Push
	Push(ctx context.Context, notify *PushNotify) error
	SyncClient() PusherNatsClient
}

type _PusherAsyncNatsClient struct {
	c  PusherNatsClient
	as async.IAsync
}

// NewPusherAsyncNatsClient
func NewPusherAsyncNatsClient(conn *natsrpc.ClientConn, as async.IAsync, opts ...natsrpc.ClientOption) PusherAsyncNatsClient {
	ret := &_PusherAsyncNatsClient{
		c:  NewPusherNatsClient(conn, opts...),
		as: as,
	}
	return ret
}

func (c *_PusherAsyncNatsClient) SyncClient() PusherNatsClient {
	return c.c
}
func (c *_PusherAsyncNatsClient) Push(ctx context.Context, notify *PushNotify) error {
	var buf bytes.Buffer
	tmpl, _ := template.New("").Parse("{{.Id}}")
	_ = tmpl.Execute(&buf, notify)
	ctx = natsrpc.WithCallTopicContext(ctx, buf.String())
	return c.c.Push(ctx, notify)
}
